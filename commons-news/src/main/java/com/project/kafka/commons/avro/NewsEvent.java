/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.project.kafka.commons.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NewsEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8678907097291321575L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NewsEvent\",\"namespace\":\"com.project.kafka.commons.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"datetime\",\"type\":\"string\"},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NewsEvent> ENCODER =
      new BinaryMessageEncoder<NewsEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NewsEvent> DECODER =
      new BinaryMessageDecoder<NewsEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<NewsEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NewsEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NewsEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this NewsEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a NewsEvent from a ByteBuffer. */
  public static NewsEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence id;
  @Deprecated public CharSequence title;
  @Deprecated public CharSequence text;
  @Deprecated public CharSequence datetime;
  @Deprecated public CharSequence category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NewsEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param title The new value for title
   * @param text The new value for text
   * @param datetime The new value for datetime
   * @param category The new value for category
   */
  public NewsEvent(CharSequence id, CharSequence title, CharSequence text, CharSequence datetime, CharSequence category) {
    this.id = id;
    this.title = title;
    this.text = text;
    this.datetime = datetime;
    this.category = category;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return text;
    case 3: return datetime;
    case 4: return category;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: title = (CharSequence)value$; break;
    case 2: text = (CharSequence)value$; break;
    case 3: datetime = (CharSequence)value$; break;
    case 4: category = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'datetime' field.
   * @return The value of the 'datetime' field.
   */
  public CharSequence getDatetime() {
    return datetime;
  }

  /**
   * Sets the value of the 'datetime' field.
   * @param value the value to set.
   */
  public void setDatetime(CharSequence value) {
    this.datetime = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public CharSequence getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(CharSequence value) {
    this.category = value;
  }

  /**
   * Creates a new NewsEvent RecordBuilder.
   * @return A new NewsEvent RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new NewsEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NewsEvent RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new NewsEvent RecordBuilder by copying an existing NewsEvent instance.
   * @param other The existing instance to copy.
   * @return A new NewsEvent RecordBuilder
   */
  public static Builder newBuilder(NewsEvent other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for NewsEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NewsEvent>
    implements org.apache.avro.data.RecordBuilder<NewsEvent> {

    private CharSequence id;
    private CharSequence title;
    private CharSequence text;
    private CharSequence datetime;
    private CharSequence category;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datetime)) {
        this.datetime = data().deepCopy(fields()[3].schema(), other.datetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NewsEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(NewsEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datetime)) {
        this.datetime = data().deepCopy(fields()[3].schema(), other.datetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.category)) {
        this.category = data().deepCopy(fields()[4].schema(), other.category);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Builder setTitle(CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public Builder setText(CharSequence value) {
      validate(fields()[2], value);
      this.text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public Builder clearText() {
      text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'datetime' field.
      * @return The value.
      */
    public CharSequence getDatetime() {
      return datetime;
    }

    /**
      * Sets the value of the 'datetime' field.
      * @param value The value of 'datetime'.
      * @return This builder.
      */
    public Builder setDatetime(CharSequence value) {
      validate(fields()[3], value);
      this.datetime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'datetime' field has been set.
      * @return True if the 'datetime' field has been set, false otherwise.
      */
    public boolean hasDatetime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'datetime' field.
      * @return This builder.
      */
    public Builder clearDatetime() {
      datetime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public CharSequence getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public Builder setCategory(CharSequence value) {
      validate(fields()[4], value);
      this.category = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public Builder clearCategory() {
      category = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NewsEvent build() {
      try {
        NewsEvent record = new NewsEvent();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (CharSequence) defaultValue(fields()[1]);
        record.text = fieldSetFlags()[2] ? this.text : (CharSequence) defaultValue(fields()[2]);
        record.datetime = fieldSetFlags()[3] ? this.datetime : (CharSequence) defaultValue(fields()[3]);
        record.category = fieldSetFlags()[4] ? this.category : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NewsEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<NewsEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NewsEvent>
    READER$ = (org.apache.avro.io.DatumReader<NewsEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
